@page "/categories/ballot/{slug}"
@attribute [Authorize]
@using oscars_games.Data
@using oscars_games.Interfaces
@using System.Security.Claims
@using Microsoft.Extensions.Options
@inject NavigationManager Navigation
@inject Data.Categories Categories
@inject AuthenticationStateProvider AuthState
@inject ICategoryService CategoryData
@inject IOptions<Settings> GameSettings

<h1 class="mb-5">@category?.Name</h1>

<EditForm Model="@categorySelection" OnSubmit="@HandleSubmit">
  <InputRadioGroup @bind-Value="categorySelection.Selection">
    @foreach (var nominee in category!.Nominees)
    {
      <div class="form-check">

        <InputRadio Value="@nominee.Id" id="@nominee.Id" class="form-check-input" disabled="@IsDisabled" />
        <label class="form-check-label" for="@nominee.Id">
          <div class="mb-2">
            <h5 class="fw-bold">@nominee.Name</h5>
            <span class="fst-italic fw-lighter">@nominee.Metadata</span>
          </div>
        </label>
      </div>
    }
  </InputRadioGroup>

  <div class="mt-4">
    <button class="btn btn-secondary" type="button" @onclick="Back">Back</button>
    <button class="btn btn-primary" type="submit">Select</button>
  </div>
</EditForm>

@code {
  [Parameter]
  public string? Slug { get; set; }

  private Data.Category? category { get; set; }
  private CategorySelection categorySelection = new CategorySelection();
  private string UserId = "";
  private string Username = "Anonymous User";
  private string Picture = "";
  private CategorySelection Selection;
  private bool IsDisabled = false;

  protected override async Task OnInitializedAsync()
  {
    IsDisabled = GameSettings.Value.CutoffDate < DateTime.UtcNow;

    var auth = await AuthState.GetAuthenticationStateAsync();

    if (auth.User.Identity == null)
    {
      Navigation.NavigateTo($"/categories/{Slug}", replace: true);
    }

    Username = auth.User.Identity.Name ?? string.Empty;
    UserId = auth.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value;

    Picture = auth.User.Claims
    .Where(c => c.Type.Equals("picture"))
    .Select(c => c.Value)
    .FirstOrDefault() ?? string.Empty;

    if (string.IsNullOrEmpty(Slug))
    {
      Navigation.NavigateTo("/categories");
    }

    category = new Category(Categories, Slug);

    if (string.IsNullOrEmpty(category.Name))
    {
      Navigation.NavigateTo("/categories");
    }

    Selection = await CategoryData.GetUserSelection(UserId, category.Id);

    if (Selection != null)
    {
      categorySelection.Selection = Selection.Selection;
    }

    await base.OnInitializedAsync();
  }

  private async Task HandleSubmit()
  {
    if (Selection != null)
    {
      Selection.Selection = categorySelection.Selection;
      await CategoryData.SaveUserSelection(Selection);
    }
    else
    {
      await CategoryData.SaveUserSelection(UserId, category.Id, categorySelection.Selection);
    }

    Back();
  }

  private void Back()
  {
    Navigation.NavigateTo("/categories");
  }
}
