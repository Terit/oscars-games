@page "/categories/ballot/{slug}"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Data.Categories Categories
@inject AuthenticationStateProvider AuthState
@using oscars_games.Data

<h1 class="mb-5">@category?.Name</h1>

<EditForm Model="@categorySelection" OnSubmit="@HandleSubmit">
  <InputRadioGroup @bind-Value="categorySelection.Selection">
    @foreach (var nominee in category?.Nominees)
    {
      <div class="form-check">

        <InputRadio Value="@nominee.Id" id="@nominee.Id" class="form-check-input" />
        <label class="form-check-label" for="@nominee.Id">
          <div class="mb-2">
            <h5 class="fw-bold">@nominee.Name</h5>
            <span class="fst-italic fw-lighter">@nominee.Metadata</span>
          </div>
        </label>
      </div>
    }
  </InputRadioGroup>

  <button class="btn btn-primary mt-4" type="submit">Select</button>
</EditForm>

@code {
  [Parameter]
  public string? Slug { get; set; }
  public Data.Category? category { get; set; }
  private CategorySelection categorySelection = new CategorySelection();

  private string Username = "Anonymous User";
  private string Picture = "";

  protected override async Task OnInitializedAsync()
  {
    var state = await AuthState.GetAuthenticationStateAsync();

    if (state.User.Identity == null)
    {
      Navigation.NavigateTo($"/categories/{Slug}");
    }

    Username = state.User.Identity.Name ?? string.Empty;

    Picture = state.User.Claims
    .Where(c => c.Type.Equals("picture"))
    .Select(c => c.Value)
    .FirstOrDefault() ?? string.Empty;

    if (string.IsNullOrEmpty(Slug))
    {
      Navigation.NavigateTo("/categories");
    }

    category = new Category(Categories, Slug);

    if (string.IsNullOrEmpty(category.Name))
    {
      Navigation.NavigateTo("/categories");
    }

    await base.OnInitializedAsync();
  }

  private void HandleSubmit()
  {
    Console.WriteLine(categorySelection.Selection);
    Navigation.NavigateTo("/categories");
  }
}
